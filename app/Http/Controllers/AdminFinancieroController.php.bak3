<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Asalariado;
use App\Models\User;
use App\Models\Lugar;
use App\Models\Parking;
use App\Models\Vehiculo;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use App\Models\Activo;
use App\Models\Pasivo;
use App\Models\Pago;
use App\Models\Reserva;
use App\Models\PagoChofer;
use App\Models\Presupuesto;
use App\Models\Gasto;
use PDF; // Librería para generar PDFs

class AdminFinancieroController extends Controller
{
    /**
     * Verificar que el usuario es administrador financiero
     */
    private function verificarAdminFinanciero()
    {
        if (!Auth::check() || !Auth::user()->hasRole('admin_financiero')) {
            return redirect('/')->with('error', 'No tienes permiso para acceder a esta sección');
        }
        return null;
    }
    /**
     * Genera la nómina en PDF para un asalariado
     *
     * @param int $id ID del asalariado
     * @return \Illuminate\Http\Response
     */
    public function generarNomina($id)
    {
        // Obtener el asalariado
        $asalariado = Asalariado::with('usuario', 'parking')->findOrFail($id);
        
        // Verificar si es día de cobro
        $hoy = Carbon::now();
        if ($hoy->day != $asalariado->dia_cobro) {
            return redirect()->back()->with('error', 'Solo se puede generar la nómina en el día de cobro del asalariado');
        }
        
        // Calcular impuestos (simplificado)
        $salarioBruto = $asalariado->salario;
        $impuestoRenta = $salarioBruto * 0.15; // 15% de IRPF
        $seguridadSocial = $salarioBruto * 0.065; // 6.5% de Seguridad Social
        $salarioNeto = $salarioBruto - $impuestoRenta - $seguridadSocial;
        
        // Datos para la nómina
        $data = [
            'asalariado' => $asalariado,
            'fecha' => $hoy->format('d/m/Y'),
            'periodo' => $hoy->format('F Y'),
            'salarioBruto' => $salarioBruto,
            'impuestoRenta' => $impuestoRenta,
            'seguridadSocial' => $seguridadSocial,
            'salarioNeto' => $salarioNeto,
            'empresa' => 'CarFlow S.L.',
            'direccionEmpresa' => 'Avenida Diagonal 123, Barcelona',
            'cifEmpresa' => 'B-12345678'
        ];
        
        // Registrar el pago en la base de datos
        DB::table('gastos')->insert([
            'id_lugar' => $asalariado->id_lugar,
            'concepto' => 'Nómina - ' . $asalariado->usuario->nombre,
            'categoria' => 'Salarios',
            'importe' => $salarioBruto,
            'fecha' => $hoy,
            'created_at' => $hoy,
            'updated_at' => $hoy
        ]);
        
        // Generar PDF
        $pdf = PDF::loadView('admin_financiero.nomina_pdf', $data);
        
        // Nombre del archivo
        $nombreArchivo = 'nomina_' . $asalariado->usuario->nombre . '_' . $hoy->format('Y_m_d') . '.pdf';
        
        // Descargar PDF
        return $pdf->download($nombreArchivo);
    }
    
    /**
     * Muestra la página principal del panel de administración financiera
     */
    public function index()
    {
        // Obtener la sede (lugar) del administrador financiero actual
        $adminFinanciero = Auth::user();
        $adminAsalariado = $adminFinanciero->asalariado;
        
        if (!$adminAsalariado || !$adminAsalariado->parking) {
            return redirect('/')->with('error', 'No tienes una sede asignada. Contacta con el administrador del sistema.');
        }
        
        $sedeId = $adminAsalariado->parking->id_lugar;
        $sede = Lugar::find($sedeId);
        
        // Obtener todos los parkings asociados a esta sede
        $parkingsIds = Parking::where('id_lugar', $sedeId)->pluck('id')->toArray();
        
        // Obtener todos los asalariados de los parkings de esta sede
        $asalariados = Asalariado::whereIn('parking_id', $parkingsIds)
            ->with(['usuario', 'usuario.role', 'parking', 'parking.lugar'])
            ->get();
        
        return view('admin_financiero.index', [
            'asalariados' => $asalariados,
            'sede' => $sede
        ]);
    }
    
    /**
     * Muestra el formulario para editar un asalariado
     */
    public function edit($id)
    {
        $asalariado = Asalariado::with(['usuario', 'parking.lugar'])->findOrFail($id);
        
        // Verificar que el asalariado pertenece a la sede del admin financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeAdmin = $adminAsalariado->parking->id_lugar;
        $sedeAsalariado = $asalariado->parking->id_lugar;
        
        if ($sedeAdmin != $sedeAsalariado) {
            return redirect()->route('admin.financiero.index')
                ->with('error', 'No puedes editar asalariados de otras sedes');
        }
        
        // Obtener los parkings de la sede para permitir cambios
        $parkings = Parking::where('id_lugar', $sedeAdmin)->get();
        
        return view('admin_financiero.edit', [
            'asalariado' => $asalariado,
            'parkings' => $parkings
        ]);
    }
    
    /**
     * Actualiza la información de un asalariado
     */
    public function update(Request $request, $id)
    {
        $request->validate([
            'salario' => 'required|numeric|min:0',
            'dia_cobro' => 'required|integer|min:1|max:31',
            'parking_id' => 'required|exists:parking,id'
        ]);
        
        $asalariado = Asalariado::findOrFail($id);
        
        // Verificar que el asalariado pertenece a la sede del admin financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeAdmin = $adminAsalariado->parking->id_lugar;
        
        // Verificar que el nuevo parking pertenece a la misma sede
        $nuevoParking = Parking::findOrFail($request->parking_id);
        if ($nuevoParking->id_lugar != $sedeAdmin) {
            return redirect()->back()
                ->with('error', 'No puedes asignar parkings de otras sedes')
                ->withInput();
        }
        
        $asalariado->update([
            'salario' => $request->salario,
            'dia_cobro' => $request->dia_cobro,
            'parking_id' => $request->parking_id
        ]);
        
        return redirect()->route('admin.financiero.index')
            ->with('success', 'Información del asalariado actualizada correctamente');
    }
    
    /**
     * Muestra el detalle de un asalariado
     */
    public function show($id)
    {
        $asalariado = Asalariado::with(['usuario', 'usuario.role', 'parking', 'parking.lugar'])->findOrFail($id);
        
        // Verificar que el asalariado pertenece a la sede del admin financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeAdmin = $adminAsalariado->parking->id_lugar;
        $sedeAsalariado = $asalariado->parking->id_lugar;
        
        if ($sedeAdmin != $sedeAsalariado) {
            return redirect()->route('admin.financiero.index')
                ->with('error', 'No puedes ver asalariados de otras sedes');
        }
        
        return view('admin_financiero.show', [
            'asalariado' => $asalariado
        ]);
    }
    
    /**
     * Muestra el resumen de costes de personal por sede
     */
    public function resumen()
    {
        // Obtener la sede del administrador financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeId = $adminAsalariado->parking->id_lugar;
        $sede = Lugar::find($sedeId);
        
        // Obtener los parkings de esta sede
        $parkingsIds = Parking::where('id_lugar', $sedeId)->pluck('id')->toArray();
        
        // Estadísticas de asalariados por rol
        $estadisticas = Asalariado::whereIn('parking_id', $parkingsIds)
            ->join('users', 'asalariados.id_usuario', '=', 'users.id_usuario')
            ->join('roles', 'users.id_roles', '=', 'roles.id_roles')
            ->select('roles.nombre_rol', DB::raw('COUNT(*) as cantidad'), DB::raw('SUM(asalariados.salario) as total_salarios'))
            ->groupBy('roles.nombre_rol')
            ->get();
        
        // Total mensual de salarios
        $totalMensual = Asalariado::whereIn('parking_id', $parkingsIds)->sum('salario');
        
        return view('admin_financiero.resumen', [
            'sede' => $sede,
            'estadisticas' => $estadisticas,
            'totalMensual' => $totalMensual
        ]);
    }
    
    /**
     * Muestra el balance de activos
     */
    public function balanceActivos(Request $request)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        
        // Obtener año de referencia para cálculos de depreciación
        $añoReferencia = $request->input('filtro_ano', date('Y'));
        
        // Obtener filtros de búsqueda
        $filtroVehiculo = $request->input('filtro_vehiculo');
        $filtroParking = $request->input('filtro_parking');
        $filtroEstado = $request->input('filtro_estado');
        $filtroAñoFabricacion = $request->input('filtro_ano_fabricacion');
        
        // Obtener vehículos con filtros aplicados
        $queryVehiculos = Vehiculo::with('tipo');
        
        // Aplicar filtro de búsqueda de vehículos
        if ($filtroVehiculo) {
            $queryVehiculos->where(function($query) use ($filtroVehiculo) {
                $query->where('marca', 'like', "%{$filtroVehiculo}%")
                      ->orWhere('modelo', 'like', "%{$filtroVehiculo}%")
                      ->orWhere('matricula', 'like', "%{$filtroVehiculo}%");
            });
        }
        
        // Filtrar por año de fabricación
        if ($filtroAñoFabricacion) {
            $queryVehiculos->where('año', $filtroAñoFabricacion);
        }
        
        // Filtrar por estado (amortizado o activo)
        if ($filtroEstado) {
            if ($filtroEstado === 'amortizado') {
                $queryVehiculos->whereRaw('(? - año) >= 5', [$añoReferencia]);
            } else if ($filtroEstado === 'activo') {
                $queryVehiculos->whereRaw('(? - año) < 5', [$añoReferencia]);
            }
        }
        
        // Obtener parkings con filtros aplicados
        $queryParkings = Parking::query();
        
        // Aplicar filtro de parkings
        if ($filtroParking) {
            $queryParkings->where('id', $filtroParking);
        }
        
        // Ejecutar las consultas
        $vehiculos = $queryVehiculos->get();
        $parkings = $queryParkings->get();
        
        // Calcular el valor total de los activos basado en su valor actual
        $valorVehiculos = 0;
        $countVehiculos = $vehiculos->count();
        $countVehiculosAmortizados = 0;
        $countVehiculosActivos = 0;
        
        foreach ($vehiculos as $vehiculo) {
            $valorActual = $vehiculo->calcularValorActual($añoReferencia);
            $valorVehiculos += $valorActual;
            
            if ($valorActual <= 0) {
                $countVehiculosAmortizados++;
            } else {
                $countVehiculosActivos++;
            }
        }
        
        // Calcular valor de parkings
        $valorParkings = 0;
        $countParkings = $parkings->count();
        $metrosCuadradosTotales = 0;
        
        foreach ($parkings as $parking) {
            $valorParking = $parking->calcularValorTotal($añoReferencia);
            $valorParkings += $valorParking;
            
            // Calcular metros cuadrados totales (25m² por plaza)
            $plazas = $parking->plazas > 0 ? $parking->plazas : 100;
            $metrosCuadradosTotales += ($plazas * 25);
        }
        
        // Crear array de activos por categoría (solo vehículos y parkings como solicitado)
        $activosPorCategoria = [
            'Vehículos' => $valorVehiculos,
            'Parkings' => $valorParkings
        ];
        
        // Ya no obtenemos ni procesamos otras categorías de activos
        
        // Datos para gráficos
        $categorias = array_keys($activosPorCategoria);
        $valores = array_values($activosPorCategoria);
        $totalActivos = array_sum($valores);
        
        // Obtener todos los parkings para los filtros
        $todosLosParkings = Parking::all();
        
        // Calcular el precio promedio por vehículo y por parking para el resumen
        $precioPromedioVehiculo = $countVehiculos > 0 ? round($valorVehiculos / $countVehiculos) : 0;
        $precioPromedioParking = $countParkings > 0 ? round($valorParkings / $countParkings) : 0;
        
        // Paginar los vehículos y parkings (15 elementos por página)
        $elementosPorPagina = 15;
        $paginaActual = request('pagina', 1);
        $offset = ($paginaActual - 1) * $elementosPorPagina;
        
        // Combinar vehículos y parkings en una colección única para la paginación
        $todosVehiculos = $vehiculos->map(function($vehiculo) {
            return [
                'tipo' => 'vehiculo',
                'objeto' => $vehiculo
            ];
        });
        
        $todosParkings = $parkings->map(function($parking) {
            return [
                'tipo' => 'parking',
                'objeto' => $parking
            ];
        });
        
        $todosActivos = $todosVehiculos->concat($todosParkings);
        $totalElementos = $todosActivos->count();
        $totalPaginas = ceil($totalElementos / $elementosPorPagina);
        
        // Obtener solo los elementos para la página actual
        $elementosPaginados = $todosActivos->slice($offset, $elementosPorPagina);
        
        return view('admin_financiero.balance_activos', [
            'vehiculos' => $vehiculos,
            'parkings' => $todosLosParkings,
            'elementosPaginados' => $elementosPaginados,
            'paginaActual' => $paginaActual,
            'totalPaginas' => $totalPaginas,
            'categorias' => $categorias,
            'valores' => $valores,
            'totalActivos' => $totalActivos,
            'añoReferencia' => $añoReferencia,
            'valorVehiculos' => $valorVehiculos,
            'valorParkings' => $valorParkings,
            'countVehiculos' => $countVehiculos,
            'countParkings' => $countParkings,
            'countVehiculosActivos' => $countVehiculosActivos,
            'countVehiculosAmortizados' => $countVehiculosAmortizados,
            'metrosCuadradosTotales' => $metrosCuadradosTotales,
            'precioPromedioVehiculo' => $precioPromedioVehiculo,
            'precioPromedioParking' => $precioPromedioParking
        ]);
    }
    
    /**
     * Muestra el balance de pasivos
     */
    public function balancePasivos(Request $request)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        // Obtener la sede del administrador financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeId = $adminAsalariado->parking->id_lugar;
        $sede = Lugar::find($sedeId);
        
        // Obtener filtros de fecha
        $fechaDesde = $request->input('fecha_desde');
        $fechaHasta = $request->input('fecha_hasta');
        
        // Si no hay filtros de fecha, establecer el período predeterminado (último mes)
        if (!$fechaDesde && !$fechaHasta) {
            $fechaHasta = Carbon::now()->format('Y-m-d');
            $fechaDesde = Carbon::now()->subMonth()->format('Y-m-d');
        } else {
            // Convertir a objetos Carbon para operaciones de fecha
            $fechaDesde = $fechaDesde ? Carbon::parse($fechaDesde) : null;
            $fechaHasta = $fechaHasta ? Carbon::parse($fechaHasta) : null;
        }
        
        // Iniciar la consulta base para pasivos tradicionales
        $query = Pasivo::where('id_lugar', $sedeId);
        
        // Aplicar filtros de fecha si están presentes
        if ($fechaDesde) {
            $query->where('fecha_registro', '>=', $fechaDesde);
        }
        
        if ($fechaHasta) {
            $query->where('fecha_registro', '<=', $fechaHasta);
        }
        
        // Ejecutar la consulta de pasivos tradicionales
        $pasivos = $query->get();
        
        // Agrupar pasivos por categoría y calcular la suma por cada categoría
        $pasivosPorCategoria = [];
        $pasivosDetalle = [];
        $fechaActual = Carbon::now();
        
        foreach ($pasivos as $pasivo) {
            // Omitir la categoría "Circulantes" y cualquier pasivo con esa categoría
            if ($pasivo->categoria === 'Circulantes') {
                continue;
            }
            
            // 1. Filtrar Ingresos No Devengados o reservas pagadas por adelantado
            if (($pasivo->categoria === 'Ingresos No Devengados' || 
                 stripos($pasivo->nombre, 'reserva') !== false || 
                 stripos($pasivo->descripcion, 'reserva') !== false) && 
                $pasivo->fecha_registro) {
                
                // Si la fecha de inicio ya pasó, no es un ingreso no devengado
                if ($pasivo->fecha_registro->lt($fechaActual)) {
                    continue;
                }
            }
            
            // Agrupar por categoría para el gráfico
            if (!isset($pasivosPorCategoria[$pasivo->categoria])) {
                $pasivosPorCategoria[$pasivo->categoria] = 0;
                $pasivosDetalle[$pasivo->categoria] = [];
            }
            
            // Sumar el valor para el total por categoría
            $pasivosPorCategoria[$pasivo->categoria] += $pasivo->valor;
            
            // Guardar detalle de cada pasivo individual con su nombre/descripción
            $pasivosDetalle[$pasivo->categoria][] = [
                'nombre' => $pasivo->nombre,
                'descripcion' => $pasivo->descripcion,
                'valor' => $pasivo->valor,
                'fecha_registro' => $pasivo->fecha_registro,
                'fecha_vencimiento' => $pasivo->fecha_vencimiento ?? null
            ];
        }
        
        // Obtener todos los asalariados (independientemente de la sede, ya que ahora hay un único administrador)
        $asalariados = Asalariado::where('estado', 'alta')->get();
        $totalSalarios = $asalariados->sum('salario');
        
        // Añadir la categoría de salarios al balance de pasivos
        $pasivosPorCategoria['Salarios personal'] = $totalSalarios;
        $pasivosDetalle['Salarios personal'] = [
            [
                'nombre' => 'Total salarios mensual',
                'descripcion' => 'Salarios de ' . $asalariados->count() . ' empleados activos',
                'valor' => $totalSalarios,
                'fecha_registro' => Carbon::now(),
                'fecha_vencimiento' => Carbon::now()->startOfMonth()->addMonth()->day(1)
            ]
        ];
        
        // Obtener los gastos de mantenimiento reales desde la tabla de gastos
        $gastoMantenimientoVehiculos = \App\Models\Gasto::where('tipo', 'mantenimiento')
            ->whereNotNull('id_vehiculo');
        
        // Aplicar filtros de fecha si están presentes
        if ($fechaDesde) {
            $gastoMantenimientoVehiculos->where('fecha', '>=', $fechaDesde);
        }
        
        if ($fechaHasta) {
            $gastoMantenimientoVehiculos->where('fecha', '<=', $fechaHasta);
        }
        
        $totalGastoMantenimientoVehiculos = $gastoMantenimientoVehiculos->sum('importe');
        
        // Si no hay gastos de mantenimiento registrados, usar un cálculo estimado
        if ($totalGastoMantenimientoVehiculos == 0) {
            // Obtener conteo de vehículos para cálculos de mantenimiento
            $vehiculos = Vehiculo::all(); // Ahora abarcamos todos los vehículos
            $countVehiculos = $vehiculos->count();
            $costoMantenimientoVehiculo = 750; // 750€ por vehículo como estimación
            $totalGastoMantenimientoVehiculos = $countVehiculos * $costoMantenimientoVehiculo;
        }
        
        // Añadir categoría de mantenimiento de vehículos
        $pasivosPorCategoria['Mantenimiento Vehículos'] = $totalGastoMantenimientoVehiculos;
        $pasivosDetalle['Mantenimiento Vehículos'] = [
            [
                'nombre' => 'Gastos de mantenimiento de la flota',
                'descripcion' => 'Mantenimiento preventivo y reparaciones',
                'valor' => $totalGastoMantenimientoVehiculos,
                'fecha_registro' => Carbon::now(),
                'fecha_vencimiento' => null
            ]
        ];
        
        // Gastos de mantenimiento de parkings
        $gastoMantenimientoParkings = \App\Models\Gasto::where('tipo', 'mantenimiento')
            ->whereNotNull('id_parking');
            
        // Aplicar filtros de fecha
        if ($fechaDesde) {
            $gastoMantenimientoParkings->where('fecha', '>=', $fechaDesde);
        }
        
        if ($fechaHasta) {
            $gastoMantenimientoParkings->where('fecha', '<=', $fechaHasta);
        }
        
        $totalGastoMantenimientoParkings = $gastoMantenimientoParkings->sum('importe');
        
        // Si no hay gastos de mantenimiento de parkings registrados, usar un cálculo estimado
        if ($totalGastoMantenimientoParkings == 0) {
            $parkings = Parking::all(); // Ahora abarcamos todos los parkings
            $countParkings = $parkings->count();
            $costoMantenimientoParking = 200; // 200€ por parking como estimación
            $totalGastoMantenimientoParkings = $countParkings * $costoMantenimientoParking;
        }
        
        // Añadir categoría de mantenimiento de parkings
        $pasivosPorCategoria['Mantenimiento Parkings'] = $totalGastoMantenimientoParkings;
        $pasivosDetalle['Mantenimiento Parkings'] = [
            [
                'nombre' => 'Gastos de mantenimiento de parkings',
                'descripcion' => 'Limpieza, seguridad, reparaciones, etc.',
                'valor' => $totalGastoMantenimientoParkings,
                'fecha_registro' => Carbon::now(),
                'fecha_vencimiento' => null
            ]
        ];
        
        // Si no hay pasivos, mostrar algunas categorías por defecto
        if (empty($pasivosPorCategoria)) {
            $pasivosPorCategoria = [
                'Préstamos bancarios' => 0,
                'Hipotecas' => 0,
                'Leasing vehicular' => 0,
                'Pagos a proveedores' => 0,
                'Salarios personal' => 0,
                'Impuestos por pagar' => 0,
                'Mantenimiento Vehículos' => 0,
                'Mantenimiento Parkings' => 0,
                'Otros' => 0
            ];
        }
        
        // Recalcular las categorías y valores después de haber añadido las nuevas categorías
        $categorias = array_keys($pasivosPorCategoria);
        $valores = array_values($pasivosPorCategoria);
        $totalPasivos = array_sum($valores);
        
        // Histórico para gráfico de evolución (últimos 6 meses)
        $meses = [];
        $datosHistorico = [];
        
        for ($i = 6; $i >= 0; $i--) {
            $mes = Carbon::now()->subMonths($i);
            $mesSiguiente = (clone $mes)->addMonth();
            $meses[] = $mes->format('M Y');
            
            // Obtener la suma de pasivos para ese mes
            $valorMes = Pasivo::where('id_lugar', $sedeId)
                ->whereBetween('fecha_registro', [$mes, $mesSiguiente])
                ->sum('valor');
                
            $datosHistorico[] = $valorMes ?: 0; // Si no hay datos, usar 0
        }
        
        // Obtener los gastos de mantenimiento registrados para la tabla detallada
        $gastosQuery = \App\Models\Gasto::where('tipo', 'mantenimiento');
        
        // Aplicar filtros de fecha si están presentes
        if ($fechaDesde) {
            $gastosQuery->where('fecha', '>=', $fechaDesde);
        }
        
        if ($fechaHasta) {
            $gastosQuery->where('fecha', '<=', $fechaHasta);
        }
        
        // Aplicar filtro por concepto
        $filtroConcepto = $request->input('filtro_concepto');
        if ($filtroConcepto) {
            $gastosQuery->where('concepto', 'like', '%' . $filtroConcepto . '%');
        }
        
        // Aplicar filtro por tipo de objeto (vehículo o parking)
        $filtroTipoObjeto = $request->input('filtro_tipo_objeto');
        if ($filtroTipoObjeto === 'vehiculo') {
            $gastosQuery->whereNotNull('id_vehiculo');
        } elseif ($filtroTipoObjeto === 'parking') {
            $gastosQuery->whereNotNull('id_parking');
        }
        
        // Aplicar filtro por importe mínimo
        $filtroImporteMin = $request->input('filtro_importe_min');
        if ($filtroImporteMin) {
            $gastosQuery->where('importe', '>=', $filtroImporteMin);
        }
        
        // Aplicar filtro por importe máximo
        $filtroImporteMax = $request->input('filtro_importe_max');
        if ($filtroImporteMax) {
            $gastosQuery->where('importe', '<=', $filtroImporteMax);
        }
        
        // Calcular la suma total para el footer antes de paginar
        $totalGastosMantenimiento = $gastosQuery->sum('importe');
        
        // Paginar los resultados (5 por página)
        $gastosMantenimiento = $gastosQuery->orderBy('fecha', 'desc')->paginate(5);
        
        // Conservar los parámetros de consulta en los enlaces de paginación
        $gastosMantenimiento->appends($request->all());
        
        // Obtener vehículos y parkings para referencias (ahora consideramos todos, no solo de una sede)
        $vehiculos = Vehiculo::all();
        $countVehiculos = $vehiculos->count();
        
        $parkings = Parking::all();
        $countParkings = $parkings->count();
        
        return view('admin_financiero.balance_pasivos', [
            'sede' => $sede,
            'fecha_desde' => $fechaDesde,
            'fecha_hasta' => $fechaHasta,
            'pasivosPorCategoria' => $pasivosPorCategoria,
            'pasivosDetalle' => $pasivosDetalle,
            'categorias' => $categorias,
            'valores' => $valores,
            'totalPasivos' => $totalPasivos,
            'meses' => $meses,
            'datosHistorico' => $datosHistorico,
            'pasivos' => $pasivos,
            'countVehiculos' => $countVehiculos,
            'countParkings' => $countParkings,
            'gastosMantenimiento' => $gastosMantenimiento,
            'totalGastosMantenimiento' => $totalGastosMantenimiento,
            'asalariados' => $asalariados,
            'totalSalarios' => $totalSalarios
        ]);
    }
    
    /**
     * Muestra la vista de gastos (presupuesto mensual y trimestral)
     */
    public function gastos(Request $request)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        // Obtener la sede del administrador financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeId = $adminAsalariado->parking->id_lugar;
        $sede = Lugar::find($sedeId);
        
        // Determinar si se está viendo presupuesto mensual o trimestral
        $tipoVista = $request->input('tipo', 'mensual');
        
        // Procesar filtros de año, mes y trimestre
        $filtroAnio = $request->input('filtro_anio');
        $filtroMes = $request->input('filtro_mes');
        $filtroTrimestre = $request->input('filtro_trimestre');
        $periodoSeleccionado = $request->input('periodo', 'ultimo-mes');
        
        // Si hay filtros específicos, usarlos para establecer las fechas
        if ($filtroAnio) {
            if ($tipoVista === 'mensual' && $filtroMes) {
                // Si se seleccionó un mes específico
                $fechaInicio = Carbon::createFromDate($filtroAnio, $filtroMes, 1)->startOfMonth();
                $fechaFin = Carbon::createFromDate($filtroAnio, $filtroMes, 1)->endOfMonth();
            } elseif ($tipoVista === 'trimestral' && $filtroTrimestre) {
                // Si se seleccionó un trimestre específico
                $mesTrimestre = (($filtroTrimestre - 1) * 3) + 1; // Calcular el mes inicial del trimestre
                $fechaInicio = Carbon::createFromDate($filtroAnio, $mesTrimestre, 1)->startOfMonth();
                $fechaFin = Carbon::createFromDate($filtroAnio, $mesTrimestre, 1)->addMonths(2)->endOfMonth();
            } elseif ($filtroAnio) {
                // Si solo se seleccionó un año
                $fechaInicio = Carbon::createFromDate($filtroAnio, 1, 1)->startOfYear();
                $fechaFin = Carbon::createFromDate($filtroAnio, 12, 31)->endOfYear();
            }
        } else {
            // Usar valores por defecto si no hay filtros específicos
            $fechaFin = Carbon::now();
            
            switch ($periodoSeleccionado) {
                case 'ultimo-anio':
                    $fechaInicio = Carbon::now()->subYear();
                    break;
                case 'ultimo-trimestre':
                    $fechaInicio = Carbon::now()->subMonths(3);
                    break;
                case 'ultimo-mes':
                default:
                    $fechaInicio = Carbon::now()->subMonth();
            }
        }
        
        // Obtener los parkings de esta sede
        $parkingsIds = Parking::where('id_lugar', $sedeId)->pluck('id')->toArray();
        $countParkings = count($parkingsIds);
        
        // Obtener los vehículos de esta sede
        $vehiculos = Vehiculo::where('id_lugar', $sedeId)->get();
        $countVehiculos = $vehiculos->count();
        
        // Calcular el gasto total en salarios
        $gastoSalarios = Asalariado::whereIn('parking_id', $parkingsIds)->sum('salario');
        
        // 1. Calcular gastos de mantenimiento de parkings
        // Obtener los gastos reales de mantenimiento de parkings desde la tabla gastos
        $gastoMantenimientoParkings = Gasto::whereIn('id_parking', $parkingsIds)
            ->where(function($query) {
                $query->where('concepto', 'like', '%mantenimiento%')
                      ->orWhere('concepto', 'like', '%reparación%')
                      ->orWhere('concepto', 'like', '%reparacion%')
                      ->orWhere('tipo', 'mantenimiento');
            })
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->sum('importe');
            
        // Calcular el costo promedio por parking (para mostrar en la vista)
        $costoMantenimientoParking = $countParkings > 0 ? round($gastoMantenimientoParkings / $countParkings, 2) : 0;
        
        // 2. Calcular gastos de mantenimiento de vehículos
        // Obtener los IDs de vehículos de esta sede
        $vehiculosIds = $vehiculos->pluck('id_vehiculos')->toArray();
        
        // Obtener los gastos reales de mantenimiento desde la tabla gastos
        $gastoMantenimientoVehiculos = Gasto::whereIn('id_vehiculo', $vehiculosIds)
            ->where(function($query) {
                $query->where('concepto', 'like', '%mantenimiento%')
                      ->orWhere('concepto', 'like', '%reparación%')
                      ->orWhere('concepto', 'like', '%reparacion%')
                      ->orWhere('tipo', 'mantenimiento');
            })
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->sum('importe');
            
        // Calcular el costo promedio por vehículo (para mostrar en la vista)
        $costoMantenimientoVehiculo = $countVehiculos > 0 ? round($gastoMantenimientoVehiculos / $countVehiculos, 2) : 0;
        
        // 3. Calcular gastos fiscales (impuestos)
        // Buscar pasivos relacionados con impuestos
        $pasivos = Pasivo::where('id_lugar', $sedeId)
            ->where(function ($query) {
                $query->where('nombre', 'like', '%impuesto%')
                      ->orWhere('categoria', 'like', '%impuesto%')
                      ->orWhere('nombre', 'like', '%fiscal%')
                      ->orWhere('categoria', 'like', '%fiscal%');
            })
            ->whereBetween('fecha_registro', [$fechaInicio, $fechaFin])
            ->get();
        
        $gastosFiscales = $pasivos->sum('valor');
        
        // Si no hay datos reales, usar una estimación basada en los salarios
        if ($gastosFiscales == 0) {
            $gastosFiscales = $gastoSalarios * 0.3; // Aproximadamente 30% de los salarios
        }
        
        // Inicializar categorías de gastos con datos reales específicos, según lo solicitado
        $categorias = [
            'Gastos de Personal - Salarios' => $gastoSalarios,
            'Gastos de Mantenimiento - Parkings' => $gastoMantenimientoParkings,
            'Gastos de Mantenimiento - Vehículos' => $gastoMantenimientoVehiculos,
            'Gastos Fiscales - Impuestos' => $gastosFiscales
        ];
        
        // Si es trimestral, multiplicar los gastos mensuales por 3
        if ($tipoVista === 'trimestral') {
            foreach ($categorias as $key => $valor) {
                $categorias[$key] = $valor * 3;
            }
        }
        
        $totalGastos = array_sum($categorias);
        
        // Datos para el gráfico de evolución con datos reales
        $periodos = [];
        $datosEvolucion = [];
        
        if ($tipoVista === 'mensual') {
            // Últimos 12 meses
            for ($i = 11; $i >= 0; $i--) {
                $mesInicio = Carbon::now()->subMonths($i)->startOfMonth();
                $mesFin = Carbon::now()->subMonths($i)->endOfMonth();
                $periodos[] = $mesInicio->format('M Y');
                
                // Suma de salarios para este mes (datos reales)
                $gastoSalarioMes = Asalariado::whereIn('parking_id', $parkingsIds)->sum('salario');
                
                // Gastos de mantenimiento de parkings (costo fijo mensual)
                $gastosParkingMes = $countParkings * $costoMantenimientoParking;
                
                // Gastos de mantenimiento de vehículos (costo fijo mensual)
                $gastosVehiculosMes = $countVehiculos * $costoMantenimientoVehiculo;
                
                // Gastos fiscales (30% de los salarios como aproximación)
                $gastosFiscalesMes = $gastoSalarioMes * 0.3;
                
                // Calcular el total mensual solo con las categorías que nos interesan
                $totalMes = $gastoSalarioMes + $gastosParkingMes + $gastosVehiculosMes + $gastosFiscalesMes;
                
                $datosEvolucion[] = $totalMes;
            }
        } else {
            // Últimos 8 trimestres
            for ($i = 7; $i >= 0; $i--) {
                $trimestreInicio = Carbon::now()->subMonths($i * 3)->startOfMonth();
                $trimestreFin = Carbon::now()->subMonths($i * 3)->addMonths(2)->endOfMonth();
                $trimNum = floor($trimestreInicio->month / 3) + 1;
                $periodos[] = 'T' . $trimNum . ' ' . $trimestreInicio->year;
                
                // Salarios para un trimestre (datos reales, multiplicado por 3 meses)
                $gastoSalarioTrimestre = Asalariado::whereIn('parking_id', $parkingsIds)->sum('salario') * 3;
                
                // Gastos de mantenimiento de parkings (costo fijo trimestral)
                $gastosParkingTrimestre = $countParkings * $costoMantenimientoParking * 3;
                
                // Gastos de mantenimiento de vehículos (costo fijo trimestral)
                $gastosVehiculosTrimestre = $countVehiculos * $costoMantenimientoVehiculo * 3;
                
                // Gastos fiscales (30% de los salarios como aproximación)
                $gastosFiscalesTrimestre = $gastoSalarioTrimestre * 0.3;
                
                // Calcular el total trimestral solo con las categorías que nos interesan
                $totalTrimestre = $gastoSalarioTrimestre + $gastosParkingTrimestre + $gastosVehiculosTrimestre + $gastosFiscalesTrimestre;
                
                $datosEvolucion[] = $totalTrimestre;
            }
        }
        
        // Obtener presupuestos para comparar
        $presupuestos = Presupuesto::where('id_lugar', $sedeId)
            ->where('periodo_tipo', $tipoVista)
            ->whereDate('fecha_fin', '>=', Carbon::now()->subMonths(1))
            ->orderBy('fecha_inicio', 'desc')
            ->get()
            ->keyBy('categoria');
            
        return view('admin_financiero.gastos', [
            'sede' => $sede,
            'presupuestos' => $presupuestos,
            'tipoVista' => $tipoVista,
            'categorias' => $categorias,
            'totalGastos' => $totalGastos,
            'periodos' => $periodos,
            'datosEvolucion' => $datosEvolucion,
            'countVehiculos' => $countVehiculos,
            'countParkings' => $countParkings,
            'costoMantenimientoParking' => $costoMantenimientoParking,
            'costoMantenimientoVehiculo' => $costoMantenimientoVehiculo,
            // Nuevos filtros añadidos
            'filtroAnio' => $filtroAnio,
            'filtroMes' => $filtroMes,
            'filtroTrimestre' => $filtroTrimestre,
            'fechaInicio' => $fechaInicio,
            'fechaFin' => $fechaFin
        ]);
    }
    
    /**
     * Muestra la interfaz para crear y gestionar presupuestos
     */
    public function presupuestos(Request $request)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        
        // Obtener la sede del administrador financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeId = $adminAsalariado->parking->id_lugar;
        $sede = Lugar::find($sedeId);
        
        // Periodo seleccionado para mostrar el gráfico (por defecto, actual)
        $periodoSeleccionado = $request->input('periodo', 'actual');
        $anio = $request->input('anio', Carbon::now()->year);
        $mes = $request->input('mes', Carbon::now()->month);
        
        // Determinar fechas de inicio y fin según el periodo seleccionado
        switch ($periodoSeleccionado) {
            case 'anual':
                $fechaInicio = Carbon::createFromDate($anio, 1, 1)->startOfYear();
                $fechaFin = Carbon::createFromDate($anio, 12, 31)->endOfYear();
                $titulo = "Balance Anual $anio";
                break;
            case 'mensual':
                $fechaInicio = Carbon::createFromDate($anio, $mes, 1)->startOfMonth();
                $fechaFin = Carbon::createFromDate($anio, $mes, 1)->endOfMonth();
                $titulo = $fechaInicio->format('F Y');
                break;
            case 'actual':
            default:
                $fechaInicio = Carbon::now()->startOfMonth();
                $fechaFin = Carbon::now()->endOfMonth();
                $titulo = "Mes Actual (" . $fechaInicio->format('F Y') . ")";
        }
        
        // 1. Obtener todos los datos para el gráfico comparativo
        
        // Obtener ingresos (reservas y pagos)
        $ingresos = 0;
        
        // Ingresos por reservas asociadas a esta sede
        $ingresosReservas = Reserva::where('estado', 'completada')
            ->whereHas('vehiculos', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })
            ->whereBetween('fecha_reserva', [$fechaInicio, $fechaFin])
            ->sum('total_precio');
        
        // Ingresos por pagos (otros servicios) asociados a esta sede
        $ingresosPagos = Pago::where('estado_pago', 'completado')
            ->whereHas('reserva.vehiculos', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })
            ->whereBetween('fecha_pago', [$fechaInicio, $fechaFin])
            ->sum('total_precio');
            
        // Añadir ingresos por alquiler de plazas de parking (utilizando reservas reales o estimación)
        // Primero intentamos obtener datos reales de reservas para este periodo
        $diasEnPeriodo = $fechaInicio->diffInDays($fechaFin) + 1;
        
        // Buscar reservas completadas que involucren parkings de esta sede
        $reservasParking = Reserva::where('estado', 'completada')
            ->whereBetween('fecha_reserva', [$fechaInicio, $fechaFin])
            ->whereHas('vehiculos', function($query) use ($sedeId) {
                $query->whereHas('parking', function($q) use ($sedeId) {
                    $q->where('id_lugar', $sedeId);
                });
            })
            ->count();
            
        // Si hay reservas, calculamos en base a ellas, si no usamos estimación
        if ($reservasParking > 0) {
            // Usamos un promedio de 40€ por reserva de parking
            $ingresosParking = $reservasParking * 40;
        } else {
            // Estimación basada en ocupación y plazas disponibles
            $ingresosParking = Parking::where('id_lugar', $sedeId)
                ->get()
                ->sum(function($parking) use ($diasEnPeriodo) {
                    // Estimación: 70% de ocupación media × precio plaza × días del periodo
                    return $parking->plazas * 0.7 * 15 * $diasEnPeriodo; // 15€/día
                });
        }
        
        $ingresos = $ingresosReservas + $ingresosPagos + $ingresosParking;
        
        // Obtener categorías de gastos para este período
        $gastos = [];
        
        // Gastos de salarios del período seleccionado (usando la tabla de gastos)
        $gastoSalarios = Gasto::where('tipo', 'salario')
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->whereHas('asalariado', function($query) use ($sedeId) {
                $query->whereHas('parking', function($q) use ($sedeId) {
                    $q->where('id_lugar', $sedeId);
                });
            })
            ->sum('importe');
        
        $gastos['Gastos de Personal - Salarios'] = $gastoSalarios;
        
        // Mantenimiento de parkings - Buscar en la tabla de gastos
        $gastosParkings = Gasto::where('tipo', 'parking')
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->whereHas('parking', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })
            ->sum('importe');
        
        $parkings = Parking::where('id_lugar', $sedeId)->get();
        $countParkings = $parkings->count();
        
        // Si hay gastos registrados, usar ese valor, de lo contrario usar estimación
        $gastos['Gastos de Mantenimiento - Parkings'] = $gastosParkings > 0 ? 
            $gastosParkings : ($countParkings * 200); // 200€ por parking al mes si no hay datos
        
        // Mantenimiento de vehículos - Buscar en la tabla de gastos
        $gastosVehiculos = Gasto::where('tipo', 'mantenimiento')
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->whereHas('vehiculo', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })
            ->sum('importe');
        
        $vehiculos = Vehiculo::where('id_lugar', $sedeId)->get();
        $countVehiculos = $vehiculos->count();
        
        // Si hay gastos registrados, usar ese valor, de lo contrario usar estimación
        $gastos['Gastos de Mantenimiento - Vehículos'] = $gastosVehiculos > 0 ? 
            $gastosVehiculos : ($countVehiculos * 750); // 750€ por vehículo al mes si no hay datos
        
        // Otros gastos del período
        $gastosOtros = Gasto::where('tipo', 'otros')
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->sum('importe');
        
        // Gastos fiscales (impuestos) - Usar valores reales o estimación
        $gastosFiscales = $gastosOtros > 0 ? $gastosOtros : ($gastoSalarios * 0.3); // 30% de los salarios como aproximación
        $gastos['Gastos Fiscales - Impuestos'] = $gastosFiscales;
        
        $totalGastos = array_sum($gastos);
        
        // Calcular el balance (beneficio o pérdida)
        $balance = $ingresos - $totalGastos;
        
        // Para periodos futuros, siempre establecer balance positivo para permitir planificación
        $esPeriodoFuturo = $fechaInicio > Carbon::now();
        if ($esPeriodoFuturo) {
            // Si es un periodo futuro, forzamos un balance positivo para permitir planificación
            // Esto evita que aparezca el mensaje de error "El total de presupuestos excede el balance disponible"
            $esPositivo = true;
            // Si el balance es negativo, establecemos un valor positivo ficticio para la planificación
            if ($balance <= 0) {
                $balance = max($totalGastos * 0.2, 10000); // 20% de los gastos o mínimo 10.000€ para planificar
            }
        } else {
            $esPositivo = $balance >= 0;
        }
        
        // 2. Obtener presupuestos existentes para el periodo seleccionado
        $presupuestosActuales = Presupuesto::where('id_lugar', $sedeId)
            ->where('periodo_tipo', 'mensual')
            ->whereBetween('fecha_inicio', [$fechaInicio, $fechaFin])
            ->get()
            ->keyBy('categoria');
        
        // Datos para selección de periodos en el gráfico
        $anios = range(2023, Carbon::now()->year);
        $meses = [
            1 => 'Enero', 2 => 'Febrero', 3 => 'Marzo', 4 => 'Abril', 5 => 'Mayo', 6 => 'Junio',
            7 => 'Julio', 8 => 'Agosto', 9 => 'Septiembre', 10 => 'Octubre', 11 => 'Noviembre', 12 => 'Diciembre'
        ];
        
        return view('admin_financiero.presupuestos', [
            'sede' => $sede,
            'titulo' => $titulo,
            'periodoSeleccionado' => $periodoSeleccionado,
            'anioSeleccionado' => $anio,
            'mesSeleccionado' => $mes,
            'anios' => $anios,
            'meses' => $meses,
            'ingresos' => $ingresos,
            'gastos' => $gastos,
            'totalGastos' => $totalGastos,
            'balance' => abs($balance),
            'esPositivo' => $esPositivo,
            'presupuestosActuales' => $presupuestosActuales
        ]);
    }
    
    /**
     * Guarda los presupuestos asignados a las categorías
     */
    public function guardarPresupuestos(Request $request)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        
        $request->validate([
            'presupuestos' => 'required|array',
            'presupuestos.*' => 'numeric|min:0|max:99999999.99',
        ], [
            'presupuestos.*.max' => 'El presupuesto no puede superar los 99.999.999,99 € debido a limitaciones técnicas.'
        ]);
        
        // Obtener la sede del administrador financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeId = $adminAsalariado->parking->id_lugar;
        
        // Obtener el periodo seleccionado (actual, mensual, anual)
        $periodoSeleccionado = $request->input('periodo', 'actual');
        $anio = $request->input('anio', Carbon::now()->year);
        $mes = $request->input('mes', Carbon::now()->month);
        
        // Determinar fechas de inicio y fin según el periodo seleccionado
        switch ($periodoSeleccionado) {
            case 'anual':
                $fechaInicio = Carbon::createFromDate($anio, 1, 1)->startOfYear();
                $fechaFin = Carbon::createFromDate($anio, 12, 31)->endOfYear();
                break;
            case 'mensual':
                $fechaInicio = Carbon::createFromDate($anio, $mes, 1)->startOfMonth();
                $fechaFin = Carbon::createFromDate($anio, $mes, 1)->endOfMonth();
                break;
            default: // 'actual'
                $fechaInicio = Carbon::now()->startOfMonth();
                $fechaFin = Carbon::now()->endOfMonth();
                break;
        }
        
        // Calcular ingresos y gastos para validar el balance antes de asignar presupuestos
        
        // Ingresos por reservas asociadas a esta sede
        $ingresosReservas = Reserva::where('estado', 'completada')
            ->whereHas('vehiculos', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })
            ->whereBetween('fecha_reserva', [$fechaInicio, $fechaFin])
            ->sum('total_precio');
        
        // Ingresos por pagos (otros servicios) asociados a esta sede
        $ingresosPagos = Pago::where('estado_pago', 'completado')
            ->whereHas('reserva.vehiculos', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })
            ->whereBetween('fecha_pago', [$fechaInicio, $fechaFin])
            ->sum('total_precio');
            
        // Ingresos por alquiler de plazas de parking
        $ingresosParking = Parking::where('id_lugar', $sedeId)
            ->get()
            ->sum(function($parking) {
                return $parking->plazas * 0.7 * 15 * 30; // 70% ocupación, 15€/día, 30 días
            });
        
        $ingresos = $ingresosReservas + $ingresosPagos + $ingresosParking;
        
        // Calcular gastos usando datos reales de la tabla 'gastos'
        // Gastos de salarios del período seleccionado
        $gastoSalarios = Gasto::where('tipo', 'salario')
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->whereHas('asalariado', function($query) use ($sedeId) {
                $query->whereHas('parking', function($q) use ($sedeId) {
                    $q->where('id_lugar', $sedeId);
                });
            })
            ->sum('importe');
        
        // Si no hay datos en el periodo actual, usar la suma de salarios de asalariados activos
        if ($gastoSalarios <= 0) {
            $gastoSalarios = Asalariado::whereIn('parking_id', function($query) use ($sedeId) {
                $query->select('id')->from('parking')->where('id_lugar', $sedeId);
            })->where('estado', 'alta')->sum('salario');
        }
        
        // Mantenimiento de parkings - Buscar en la tabla de gastos
        $gastosParkings = Gasto::where('tipo', 'parking')
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->whereHas('parking', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })
            ->sum('importe');
        
        $countParkings = Parking::where('id_lugar', $sedeId)->count();
        
        // Si no hay datos registrados, usar estimación
        if ($gastosParkings <= 0) {
            $gastosParkings = $countParkings * 200; // 200€ por parking al mes
        }
        
        // Mantenimiento de vehículos - Buscar en la tabla de gastos
        $gastosVehiculos = Gasto::where('tipo', 'mantenimiento')
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->whereHas('vehiculo', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })
            ->sum('importe');
        
        $countVehiculos = Vehiculo::where('id_lugar', $sedeId)->count();
        
        // Si no hay datos registrados, usar estimación
        if ($gastosVehiculos <= 0) {
            $gastosVehiculos = $countVehiculos * 750; // 750€ por vehículo al mes
        }
        
        // Otros gastos del período
        $gastosOtros = Gasto::where('tipo', 'otros')
            ->whereBetween('fecha', [$fechaInicio, $fechaFin])
            ->sum('importe');
        
        // Si no hay otros gastos, usar estimación basada en salarios
        if ($gastosOtros <= 0) {
            $gastosOtros = $gastoSalarios * 0.3; // 30% de los salarios
        }
        
        $totalGastos = $gastoSalarios + $gastosParkings + $gastosVehiculos + $gastosOtros;
        
        // Calcular balance
        $balance = $ingresos - $totalGastos;
        $esPositivo = $balance >= 0;
        
        // Para periodos futuros (mayores a la fecha actual), siempre permitir presupuestos
        $esPeriodoFuturo = $fechaInicio > Carbon::now();
        
        // Si es un periodo futuro o si hay balance positivo, permitir sin advertencias
        // Esto permite planificación financiera para periodos donde aún no hay datos reales completos
        
        // Calcular el total de presupuestos solicitados
        $totalPresupuestosSolicitados = 0;
        if ($request->has('presupuestos') && is_array($request->presupuestos)) {
            $totalPresupuestosSolicitados = array_sum($request->presupuestos);
        }
        
        // Para periodos futuros, NO realizamos validación de balance
        // Esto permite planificar presupuestos para el futuro sin restricciones
        if (!$esPeriodoFuturo && $totalPresupuestosSolicitados > $balance && $balance > 0) {
            // Solo mostrar una advertencia, pero permitir guardar los presupuestos
            session()->flash('warning', 
                'El total de presupuestos (' . number_format($totalPresupuestosSolicitados, 2, ',', '.') . ' €) ' . 
                'excede el balance disponible (' . number_format($balance, 2, ',', '.') . ' €). ' . 
                'Los presupuestos se han guardado, pero considere ajustarlos.');
        }
        
        try {
            // Obtener la sede del administrador financiero
            $adminAsalariado = Auth::user()->asalariado;
            $sedeId = $adminAsalariado->parking->id_lugar;
            
            // Fecha de inicio y fin para el período actual (mes actual)
            $fechaInicio = Carbon::now()->startOfMonth();
            $fechaFin = Carbon::now()->endOfMonth();
            
            // Iniciar transacción para garantizar la integridad
            DB::beginTransaction();
            
            // Recorrer cada categoría y su presupuesto asignado
            foreach ($request->presupuestos as $categoria => $monto) {
                // Buscar si ya existe un presupuesto para esta categoría en este periodo
                $presupuesto = Presupuesto::where('id_lugar', $sedeId)
                    ->where('categoria', $categoria)
                    ->where('periodo_tipo', 'mensual')
                    ->whereBetween('fecha_inicio', [$fechaInicio, $fechaFin])
                    ->first();
                
                if ($presupuesto) {
                    // Actualizar presupuesto existente
                    $presupuesto->monto = $monto;
                    $presupuesto->save();
                } else {
                    // Crear nuevo presupuesto
                    Presupuesto::create([
                        'id_lugar' => $sedeId,
                        'categoria' => $categoria,
                        'monto' => $monto,
                        'fecha_inicio' => $fechaInicio,
                        'fecha_fin' => $fechaFin,
                        'periodo_tipo' => 'mensual',
                        'creado_por' => Auth::id(),
                        'notas' => 'Presupuesto asignado para ' . $fechaInicio->format('F Y')
                    ]);
                }
            }
            
            DB::commit();
            return redirect()->route('admin.financiero.presupuestos')
                ->with('success', 'Presupuestos guardados correctamente para ' . $fechaInicio->format('F Y'));
                
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()
                ->with('error', 'Error al guardar los presupuestos: ' . $e->getMessage())
                ->withInput();
        }
    }
    
    /**
     * Muestra el historial de presupuestos
     */
    public function historialPresupuestos(Request $request)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        
        // Obtener la sede del administrador financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeId = $adminAsalariado->parking->id_lugar;
        $sede = Lugar::find($sedeId);
        
        // Filtros
        $anio = $request->input('anio', Carbon::now()->year);
        $mes = $request->input('mes');
        $categoria = $request->input('categoria');
        
        // Consulta base de presupuestos
        $query = Presupuesto::where('id_lugar', $sedeId)
            ->orderBy('fecha_inicio', 'desc');
        
        // Aplicar filtros
        if ($anio) {
            $query->whereYear('fecha_inicio', $anio);
        }
        
        if ($mes) {
            $query->whereMonth('fecha_inicio', $mes);
        }
        
        if ($categoria) {
            $query->where('categoria', $categoria);
        }
        
        // Obtener presupuestos
        $presupuestos = $query->paginate(15);
        
        // Datos para filtros
        $anios = range(2023, Carbon::now()->year);
        $meses = [
            1 => 'Enero', 2 => 'Febrero', 3 => 'Marzo', 4 => 'Abril', 5 => 'Mayo', 6 => 'Junio',
            7 => 'Julio', 8 => 'Agosto', 9 => 'Septiembre', 10 => 'Octubre', 11 => 'Noviembre', 12 => 'Diciembre'
        ];
        $categorias = Presupuesto::where('id_lugar', $sedeId)
            ->distinct()
            ->pluck('categoria')
            ->toArray();
        
        return view('admin_financiero.presupuestos_historial', [
            'sede' => $sede,
            'presupuestos' => $presupuestos,
            'anios' => $anios,
            'meses' => $meses,
            'categorias' => $categorias,
            'anioSeleccionado' => $anio,
            'mesSeleccionado' => $mes,
            'categoriaSeleccionada' => $categoria
        ]);
    }
    
    /**
     * Muestra el listado de parkings para el CRUD
     */
    public function parkings()
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        
        // Obtener todos los parkings con sus lugares
        $parkings = Parking::with('lugar')->get();
        
        return view('admin_financiero.parkings.index', [
            'parkings' => $parkings
        ]);
    }
    
    /**
     * Muestra el formulario para editar un parking
     */
    public function editParking($id)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        
        // Obtener el parking
        $parking = Parking::with('lugar')->findOrFail($id);
        
        return view('admin_financiero.parkings.edit', [
            'parking' => $parking
        ]);
    }
    
    /**
     * Actualiza la información de un parking
     */
    public function updateParking(Request $request, $id)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        
        $request->validate([
            'metros_cuadrados' => 'required|numeric|min:1',
            'precio_metro' => 'required|numeric|min:0'
        ]);
        
        // Obtener el parking
        $parking = Parking::findOrFail($id);
        
        // Actualizar datos
        $parking->metros_cuadrados = $request->metros_cuadrados;
        $parking->precio_metro = $request->precio_metro;
        $parking->save();
        
        return redirect()->route('admin.financiero.parkings')
            ->with('success', 'Información del parking actualizada correctamente');
    }
    
    /**
     * Muestra la vista de ingresos (estimación mensual y trimestral)
     */
    public function ingresos(Request $request)
    {
        // Verificar permisos
        $verificacion = $this->verificarAdminFinanciero();
        if ($verificacion) {
            return $verificacion;
        }
        
        // Obtener la sede del administrador financiero
        $adminAsalariado = Auth::user()->asalariado;
        $sedeId = $adminAsalariado->parking->id_lugar;
        $sede = Lugar::find($sedeId);
        
        // Determinar si se está viendo estimación mensual o trimestral
        $tipoVista = $request->input('tipo', 'mensual');
        
        // Definir periodos disponibles para filtrar
        $periodos = [
            'mensual' => 'Último mes',
            'trimestral' => 'Último trimestre',
            'semestral' => 'Último semestre',
            'anual' => 'Último año'
        ];
        
        // Período seleccionado (por defecto mensual)
        $periodoSeleccionado = $request->input('periodo', 'mensual');
        
        // Procesar filtros de año, mes y trimestre
        $filtroAnio = $request->input('filtro_anio');
        $filtroMes = $request->input('filtro_mes');
        $filtroTrimestre = $request->input('filtro_trimestre');
        
        // Si hay filtros específicos, usarlos para establecer las fechas
        if ($filtroAnio) {
            if ($tipoVista === 'mensual' && $filtroMes) {
                // Si se seleccionó un mes específico
                $fechaInicio = Carbon::createFromDate($filtroAnio, $filtroMes, 1)->startOfMonth();
                $fechaFin = Carbon::createFromDate($filtroAnio, $filtroMes, 1)->endOfMonth();
            } elseif ($tipoVista === 'trimestral' && $filtroTrimestre) {
                // Si se seleccionó un trimestre específico
                $mesTrimestre = (($filtroTrimestre - 1) * 3) + 1; // Calcular el mes inicial del trimestre
                $fechaInicio = Carbon::createFromDate($filtroAnio, $mesTrimestre, 1)->startOfMonth();
                $fechaFin = Carbon::createFromDate($filtroAnio, $mesTrimestre, 1)->addMonths(2)->endOfMonth();
            } elseif ($filtroAnio) {
                // Si solo se seleccionó un año
                $fechaInicio = Carbon::createFromDate($filtroAnio, 1, 1)->startOfYear();
                $fechaFin = Carbon::createFromDate($filtroAnio, 12, 31)->endOfYear();
            }
        } else {
            // Usar valores por defecto si no hay filtros específicos
            $fechaFin = Carbon::now();
            
            switch ($periodoSeleccionado) {
                case 'mensual':
                    $fechaInicio = Carbon::now()->subMonth();
                    break;
                case 'trimestral':
                    $fechaInicio = Carbon::now()->subMonths(3);
                    break;
                case 'semestral':
                    $fechaInicio = Carbon::now()->subMonths(6);
                    break;
                case 'anual':
                    $fechaInicio = Carbon::now()->subYear();
                    break;
                default:
                    $fechaInicio = Carbon::now()->subMonth();
            }
        }
        
        // Fecha de fin del período para el cálculo de ingresos (en vista trimestral)
        $fechaFinPeriodo = ($tipoVista === 'mensual') ? $fechaFin : $fechaFin;
        
        // Obtener pagos de reservas sin agrupar por tipo de vehículo
        // Ya que no tenemos la relación directa en la base de datos
        $pagosReservas = Pago::where('estado_pago', 'completado')
            ->whereBetween('fecha_pago', [$fechaInicio, $fechaFinPeriodo])
            ->select(DB::raw('SUM(total_precio) as total'))
            ->first();
        
        // Obtener total de pagos
        $totalPagos = $pagosReservas ? $pagosReservas->total : 0;
        
        // Como no podemos agrupar por tipo de vehículo, usaremos categorias genéricas
        $pagosReservas = [
            'Alquiler de vehículos' => $totalPagos
        ];
        
        // Obtener pagos de servicios de conductor (ingresos por llevar clientes en taxi)
        try {
            $pagosChoferes = DB::table('pagos_choferes')
                ->whereBetween('fecha_pago', [$fechaInicio, $fechaFinPeriodo])
                ->where('estado_pago', 'pagado')
                ->sum('importe_empresa');
        } catch (\Exception $e) {
            // Si hay un error, establecemos el valor en cero
            $pagosChoferes = 0;
        }
        
        // Construir el array de fuentes de ingresos con descripciones específicas
        $fuentesIngresos = [];
        
        // Agregar los pagos de reservas
        foreach ($pagosReservas as $tipo => $total) {
            $fuentesIngresos['Ingresos por ' . $tipo] = $total;
        }
        
        // Agregar siempre los servicios de conductor (incluso si es 0)
        $fuentesIngresos['Ingresos por Servicios de Taxi'] = $pagosChoferes;
        
        // Obtener ingresos por reparaciones mecánicas (talleres)
        try {
            // Primero intentamos obtener todos los pagos de taller
            $ingresosTaller = DB::table('pago_taller')->sum('total');
            
            // Si hay datos y la estructura lo permite, filtramos por sede y fecha
            if ($ingresosTaller > 0) {
                try {
                    // Consulta completa con filtros
                    $ingresosFiltrados = DB::table('pago_taller')
                        ->join('mantenimientos', 'pago_taller.mantenimiento_id', '=', 'mantenimientos.id')
                        ->join('vehiculos', 'mantenimientos.vehiculo_id', '=', 'vehiculos.id_vehiculos')
                        ->where('vehiculos.id_lugar', $sedeId)
                        ->whereBetween('pago_taller.created_at', [$fechaInicio, $fechaFinPeriodo])
                        ->sum('pago_taller.total');
                    
                    // Si la consulta filtrada devuelve datos, la usamos
                    if ($ingresosFiltrados > 0) {
                        $ingresosTaller = $ingresosFiltrados;
                    }
                } catch (\Exception $e) {
                    // Si falla la consulta con filtros, mantenemos el total general
                    // Ya tenemos $ingresosTaller con todos los pagos
                }
            }
        } catch (\Exception $e) {
            // Si hay un error grave, establecemos el valor en cero
            $ingresosTaller = 0;
            // Registrar el error para depuración
            \Log::error('Error al obtener ingresos del taller: ' . $e->getMessage());
        }
        
        // Agregar los ingresos por reparaciones
        $fuentesIngresos['Ingresos por Reparaciones Mecánicas'] = $ingresosTaller;
        
        // No agregamos categorías con valores 0, solo mostramos datos reales
        
        // Ajustar para vista trimestral si es necesario
        if ($tipoVista === 'trimestral') {
            foreach ($fuentesIngresos as $key => $valor) {
                // Triplicamos todos los valores para la vista trimestral
                $fuentesIngresos[$key] = $valor * 3;
            }
        }
        
        $totalIngresos = array_sum($fuentesIngresos);
        
        // Datos para el gráfico de evolución con datos reales
        $periodosGrafico = [];
        $datosEvolucion = [];
        
        if ($tipoVista === 'mensual') {
            // Últimos 12 meses
            for ($i = 11; $i >= 0; $i--) {
                $mesInicio = Carbon::now()->subMonths($i)->startOfMonth();
                $mesFin = Carbon::now()->subMonths($i)->endOfMonth();
                $periodosGrafico[] = $mesInicio->format('M Y');
                
                // Ingresos por pagos de reservas en este mes
                try {
                    $ingresosPagosMes = Pago::where('estado_pago', 'completado')
                        ->whereBetween('fecha_pago', [$mesInicio, $mesFin])
                        ->sum('total_precio');
                } catch (\Exception $e) {
                    $ingresosPagosMes = 0;
                }
                    
                // Ingresos por servicios de conductor en este mes
                try {
                    $ingresosChoferesMes = DB::table('pagos_choferes')
                        ->where('estado_pago', 'pagado')
                        ->whereBetween('fecha_pago', [$mesInicio, $mesFin])
                        ->sum('importe_empresa');
                } catch (\Exception $e) {
                    $ingresosChoferesMes = 0;
                }
                    
                $datosEvolucion[] = $ingresosPagosMes + $ingresosChoferesMes;
            }
        } else {
            // Últimos 8 trimestres
            for ($i = 7; $i >= 0; $i--) {
                $trimestreInicio = Carbon::now()->subMonths($i * 3)->startOfMonth();
                $trimestreFin = Carbon::now()->subMonths($i * 3)->addMonths(2)->endOfMonth();
                $trimNum = floor($trimestreInicio->month / 3) + 1;
                $periodosGrafico[] = 'T' . $trimNum . ' ' . $trimestreInicio->year;
                
                // Ingresos por pagos de reservas en este trimestre
                try {
                    $ingresosPagosTrimestre = Pago::where('estado_pago', 'completado')
                        ->whereBetween('fecha_pago', [$trimestreInicio, $trimestreFin])
                        ->sum('total_precio');
                } catch (\Exception $e) {
                    $ingresosPagosTrimestre = 0;
                }
                    
                // Ingresos por servicios de conductor en este trimestre
                try {
                    $ingresosChoferesTrimestre = DB::table('pagos_choferes')
                        ->where('estado_pago', 'pagado')
                        ->whereBetween('fecha_pago', [$trimestreInicio, $trimestreFin])
                        ->sum('importe_empresa');
                } catch (\Exception $e) {
                    $ingresosChoferesTrimestre = 0;
                }
                    
                $datosEvolucion[] = $ingresosPagosTrimestre + $ingresosChoferesTrimestre;
            }
        }
        
        // Generar datos para proyecciones futuras
        $periodosFuturos = [];
        $proyeccion = [];
        
        // Generar periodos futuros basados en el tipo de vista
        if ($tipoVista === 'mensual') {
            // Para vista mensual, mostrar proyección de 3 meses
            for ($i = 1; $i <= 3; $i++) {
                $mesFuturo = Carbon::now()->addMonths($i);
                $periodosFuturos[] = $mesFuturo->format('M Y');
                
                // Generar datos de proyección (incremento aleatorio entre 5-15%)
                $incremento = 1 + (mt_rand(5, 15) / 100);
                $ultimoValor = end($datosEvolucion);
                $proyeccion[] = $ultimoValor * pow($incremento, $i);
            }
        } else {
            // Para vista trimestral, mostrar proyección de 4 trimestres
            for ($i = 1; $i <= 4; $i++) {
                $trimestreFuturo = Carbon::now()->addMonths($i * 3);
                $trimNum = floor($trimestreFuturo->month / 3) + 1;
                $periodosFuturos[] = 'T' . $trimNum . ' ' . $trimestreFuturo->year;
                
                // Generar datos de proyección (incremento aleatorio entre 8-20%)
                $incremento = 1 + (mt_rand(8, 20) / 100);
                $ultimoValor = end($datosEvolucion);
                $proyeccion[] = $ultimoValor * pow($incremento, $i);
            }
        }
        
        // Datos para comparativa de rendimiento
        $periodosPasados = array_slice($periodosGrafico, -3); // Últimos 3 periodos
        $datosPasados = array_slice($datosEvolucion, -3); // Datos de los últimos 3 periodos
        
        // Cálculo de la variación promedio (para proyecciones)
        if (count($datosPasados) >= 2) {
            $variaciones = [];
            for ($i = 1; $i < count($datosPasados); $i++) {
                if ($datosPasados[$i-1] > 0) {
                    $variaciones[] = (($datosPasados[$i] - $datosPasados[$i-1]) / $datosPasados[$i-1]) * 100;
                } else {
                    $variaciones[] = 5; // Valor por defecto si no hay datos previos
                }
            }
            $variacionPromedio = count($variaciones) > 0 ? array_sum($variaciones) / count($variaciones) : 5;
        } else {
            $variacionPromedio = 5; // Valor por defecto si no hay suficientes datos
        }
        
        // Si no hay datos reales o son todos cero, generar datos de ejemplo
        if ($totalIngresos == 0) {
            // Datos de ejemplo para la demostración
            $fuentesIngresos = [
                'Ingresos por Alquiler de vehículos' => 15000,
                'Ingresos por Servicios de Taxi' => 6000
            ];
            $totalIngresos = array_sum($fuentesIngresos);
            
            // Datos de ejemplo para el gráfico de evolución
            if (array_sum($datosEvolucion) == 0) {
                $datosEvolucion = [];
                $base = 18000;
                for ($i = 0; $i < count($periodosGrafico); $i++) {
                    $datosEvolucion[] = $base + rand(-2000, 3000);
                }
            }
        }
        
        return view('admin_financiero.ingresos', [
            'sede' => $sede,
            'tipoVista' => $tipoVista,
            'periodos' => $periodos,
            'periodoSeleccionado' => $periodoSeleccionado,
            'fechaInicio' => $fechaInicio,
            'fechaFin' => $fechaFin,
            'fuentesIngresos' => $fuentesIngresos,
            'totalIngresos' => $totalIngresos,
            'periodosGrafico' => $periodosGrafico,
            'datosEvolucion' => $datosEvolucion,
            'periodosFuturos' => $periodosFuturos,
            'proyeccion' => $proyeccion,
            'periodosPasados' => $periodosPasados,
            'datosPasados' => $datosPasados,
            'variacionPromedio' => $variacionPromedio,
            // Nuevos filtros añadidos
            'filtroAnio' => $filtroAnio,
            'filtroMes' => $filtroMes,
            'filtroTrimestre' => $filtroTrimestre
        ]);
    }
    

    /**
     * Muestra la página de presupuestos para un vehículo amortizado
     * 
     * @param Request $request
     * @param int $vehiculo_id ID del vehículo amortizado
     * @return \Illuminate\Http\Response
     */
    public function presupuestosAmortizado(Request $request, $vehiculo_id)
    {
        // Verificar permisos
        $this->verificarAdminFinanciero();
        
        // Obtener el vehículo
        $vehiculo = Vehiculo::findOrFail($vehiculo_id);
        
        // Verificar que el vehículo está amortizado
        if (!$vehiculo->estaAmortizado()) {
            return redirect()->route('admin.financiero.balance.activos')
                ->with('error', 'El vehículo no está amortizado.');
        }
        
        // Obtener la sede actual
        $usuario = auth()->user();
        
        // Comprobar si el usuario tiene lugar asignado
        if (!$usuario->lugar) {
            // Si el usuario no tiene lugar, usar el lugar del vehículo
            $sede = $vehiculo->lugar;
            
            if (!$sede) {
                // Si el vehículo tampoco tiene lugar, redirigir con error
                return redirect()->route('admin.financiero.balance.activos')
                    ->with('error', 'No se pudo determinar la sede. Por favor, contacte con el administrador.');
            }
        } else {
            $sede = $usuario->lugar;
        }
        
        $sedeId = $sede->id_lugar;
        
        // Obtener el mes actual para los filtros
        $anioActual = Carbon::now()->year;
        $mesActual = Carbon::now()->month;
        
        // Obtener los datos de presupuestos para el mes actual
        $fechaInicio = Carbon::createFromDate($anioActual, $mesActual, 1)->startOfMonth();
        $fechaFin = Carbon::createFromDate($anioActual, $mesActual, 1)->endOfMonth();
        
        // Calcular ingresos para el período actual
        $ingresos = Reserva::where('id_lugar', $sedeId)
            ->whereBetween('fecha_inicio', [$fechaInicio, $fechaFin])
            ->where('estado', 'completada')
            ->sum('total_precio');
        
        // Calcular gastos para el período actual
        $gastoSalarios = Asalariado::whereHas('parking', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })->sum('salario');
        
        // Calcular el resto de gastos...
        // (código simplificado para obtener los gastos)
        $categorias = [
            'Gastos de Personal - Salarios' => $gastoSalarios,
            // Otros gastos...
        ];
        
        $totalGastos = array_sum($categorias);
        
        // Calcular el balance (beneficio o pérdida)
        $balance = $ingresos - $totalGastos;
        $esPositivo = $balance >= 0;
        
        // Obtener presupuestos existentes para el periodo actual
        $presupuestosActuales = Presupuesto::where('id_lugar', $sedeId)
            ->where('periodo_tipo', 'mensual')
            ->whereBetween('fecha_inicio', [$fechaInicio, $fechaFin])
            ->get()
            ->keyBy('categoria');
        
        // Calcular el costo de reparación del vehículo
        $costoReparacion = $vehiculo->calcularCostoReparacion();
        
        // Verificar si hay suficiente presupuesto para reparar el vehículo
        $presupuestoSuficiente = $esPositivo && $balance >= $costoReparacion;
        
        // Datos para selección de periodos en el gráfico
        $anios = range(2023, Carbon::now()->year);
        $meses = [
            1 => 'Enero', 2 => 'Febrero', 3 => 'Marzo', 4 => 'Abril', 5 => 'Mayo', 6 => 'Junio',
            7 => 'Julio', 8 => 'Agosto', 9 => 'Septiembre', 10 => 'Octubre', 11 => 'Noviembre', 12 => 'Diciembre'
        ];
        
        // Pasar los datos a la vista
        return view('admin_financiero.presupuestos', [
            'sede' => $sede,
            'titulo' => 'Presupuesto del Mes Actual',
            'periodoSeleccionado' => 'actual',
            'anioSeleccionado' => $anioActual,
            'mesSeleccionado' => $mesActual,
            'anios' => $anios,
            'meses' => $meses,
            'ingresos' => $ingresos,
            'gastos' => $categorias,
            'totalGastos' => $totalGastos,
            'balance' => abs($balance),
            'esPositivo' => $esPositivo,
            'presupuestosActuales' => $presupuestosActuales,
            'vehiculoAmortizado' => $vehiculo,
            'costoReparacion' => $costoReparacion,
            'presupuestoSuficiente' => $presupuestoSuficiente,
            'esMesActual' => true
        ]);
    }
    
    /**
     * Repara un vehículo amortizado usando el presupuesto actual
     * 
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    public function repararVehiculoAmortizado(Request $request)
    {
        // Verificar permisos
        $this->verificarAdminFinanciero();
        
        // Validar los datos del formulario
        $request->validate([
            'vehiculo_id' => 'required|exists:vehiculos,id_vehiculos',
        ]);
        
        // Obtener el vehículo
        $vehiculo = Vehiculo::findOrFail($request->vehiculo_id);
        
        // Obtener la sede actual
        $usuario = auth()->user();
        
        // Comprobar si el usuario tiene lugar asignado
        if (!$usuario->lugar) {
            // Si el usuario no tiene lugar, usar el lugar del vehículo
            $sede = $vehiculo->lugar;
            
            if (!$sede) {
                // Si el vehículo tampoco tiene lugar, redirigir con error
                return redirect()->route('admin.financiero.balance.activos')
                    ->with('error', 'No se pudo determinar la sede. Por favor, contacte con el administrador.');
            }
        } else {
            $sede = $usuario->lugar;
        }
        
        $sedeId = $sede->id_lugar;
        
        // Verificar que el mes seleccionado es el actual
        $esMesActual = $request->input('es_mes_actual', false);
        
        if (!$esMesActual) {
            return redirect()->back()->with('error', 'Solo se pueden reparar vehículos amortizados en el mes actual.');
        }
        
        // Verificar que el vehículo está amortizado
        if (!$vehiculo->estaAmortizado()) {
            return redirect()->back()->with('error', 'El vehículo no está amortizado.');
        }
        
        // Calcular el costo de reparación
        $costoReparacion = $vehiculo->calcularCostoReparacion();
        
        // Obtener el mes actual para los filtros
        $anioActual = Carbon::now()->year;
        $mesActual = Carbon::now()->month;
        
        // Obtener el período actual
        $fechaInicio = Carbon::createFromDate($anioActual, $mesActual, 1)->startOfMonth();
        $fechaFin = Carbon::createFromDate($anioActual, $mesActual, 1)->endOfMonth();
        
        // Calcular ingresos para el período actual
        $ingresos = Reserva::where('id_lugar', $sedeId)
            ->whereBetween('fecha_inicio', [$fechaInicio, $fechaFin])
            ->where('estado', 'completada')
            ->sum('total_precio');
        
        // Calcular gastos para el período actual
        // (código simplificado)
        $gastoSalarios = Asalariado::whereHas('parking', function($query) use ($sedeId) {
                $query->where('id_lugar', $sedeId);
            })->sum('salario');
        
        // Obtener categorías de gastos
        $categorias = [
            'Gastos de Personal - Salarios' => $gastoSalarios,
            // Otros gastos...
        ];
        
        $totalGastos = array_sum($categorias);
        
        // Calcular el balance disponible
        $balance = $ingresos - $totalGastos;
        
        // Verificar si hay suficiente presupuesto para reparar el vehículo
        if ($balance < $costoReparacion) {
            return redirect()->back()->with('error', 
                'No hay suficiente presupuesto para reparar este vehículo. ' .
                'Balance disponible: ' . number_format($balance, 2, ',', '.') . ' €. ' .
                'Costo de reparación: ' . number_format($costoReparacion, 2, ',', '.') . ' €.');
        }
        
        // Reparar el vehículo (actualizar en base de datos)
        $descripcion = 'Reparación del vehículo ' . $vehiculo->marca . ' ' . $vehiculo->modelo . ' (' . $vehiculo->matricula . ')';
        $vehiculo->repararVehiculoAmortizado($descripcion);
        
        // Registrar el gasto de reparación
        $gasto = new Gasto();
        $gasto->concepto = $descripcion;
        $gasto->importe = $costoReparacion;
        $gasto->fecha = now();
        $gasto->tipo = 'mantenimiento';
        $gasto->id_vehiculo = $vehiculo->id_vehiculos;
        $gasto->id_lugar = $sedeId;
        $gasto->save();
        
        // Ajustar el presupuesto disponible restando el costo de reparación
        // Crear o actualizar la categoría de presupuesto para reparaciones
        $categoriaPresupuesto = 'Gastos de Mantenimiento - Reparaciones';
        $presupuesto = Presupuesto::firstOrNew([
            'id_lugar' => $sedeId,
            'categoria' => $categoriaPresupuesto,
            'periodo_tipo' => 'mensual',
            'fecha_inicio' => $fechaInicio,
            'fecha_fin' => $fechaFin
        ]);
        
        // Si ya existe, incrementar el valor
        if ($presupuesto->exists) {
            $presupuesto->valor += $costoReparacion;
        } else {
            $presupuesto->valor = $costoReparacion;
        }
        
        $presupuesto->save();
        
        return redirect()->route('admin.financiero.balance.activos')
            ->with('success', 
                'El vehículo ' . $vehiculo->marca . ' ' . $vehiculo->modelo . ' ha sido reparado exitosamente. ' .
                'Se ha descontado ' . number_format($costoReparacion, 2, ',', '.') . ' € del presupuesto disponible.');
    }
}
